{"version":3,"sources":["blog.services.js"],"names":["blogPost","createPost","post","regeneratorRuntime","async","_context","prev","next","find","element","abrupt","status","message","data","push","postExist","code","stop","getPost","_context2","postId","_context3","_objectSpread","updatePost","module"],"mappings":"wuBAGA,IAAOA,SAAW,GAEZC,WAAa,SAAMC,GAAN,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAEAP,SAASQ,KAAK,SAACC,GAAD,OAAaA,EAAQP,OAASA,IAF5C,OAAAG,EAAAK,OAAA,SAFZV,CAQHW,OAAO,QANLV,KAAAA,IAAaW,QAAA,qBAAAC,KAAA,OAAAR,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OACfP,SAAAc,KAAAZ,GADeG,EAAAK,OAAA,SAEZK,CAA0BJ,OAAA,UAAAK,KAAA,IAChCJ,QAAA,0BAeGC,KAAMX,IAlBS,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAY,WAAAC,QAAA,WAAA,OAAAf,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAAAY,EAAAT,OAAA,SAAA,CAuBfC,OAAO,UAvBQK,KAAA,IAMfL,QAAAA,4BAAkBE,KAAAb,WANH,KAAA,EAAA,IAAA,MAAA,OAAAmB,EAAAF,WASfJ,WAAM,SAANA,EAAMO,GAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,GAsBQP,SAASQ,KAAK,SAACC,GAAD,OAAaA,EAAQW,SAAWA,IAtBtD,OAAAC,EAAAX,OAAA,SAITV,CAbkBW,OAAA,QAefA,KAAAA,IAAoBC,QAAA,qBACpBI,KAAAA,OAPMK,EAAAd,KAAA,EAAA,MAAA,KAAA,EAAA,OAiCVP,SAASoB,GAATE,cAAA,GAAuBtB,SAASoB,GAAhC,GAA2CG,GAjCjCF,EAAAX,OAAA,SATS,CAAAC,OAAA,UAAAK,KAAA,IAAAJ,QAAA,0BAAAC,KAAAb,SAAAoB,KAST,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAJ,WAYVO,OAAMN,QAAS,CAAAjB,WAAAA,WAAAiB,QAAAA,QAAAK,WAAAA","file":"blog.services.min.js","sourcesContent":["// Services contain the logic for interaction with our database\r\n// Creating blog post \r\n\r\nconst  blogPost = [] // empty array to fetch all the logic data to our server\r\n\r\nconst createPost = async(post) => {\r\n    //loop into the data to see if data exists\r\n const postExist = blogPost.find((element) => element.post === post); // helps you find the post if it exists.\r\n //if it does I want to receive this data\r\n if(postExist){\r\n    return{\r\n    status:'error' ,  // in handling errors\r\n    code: 409,\r\n    message: 'Post already exist',\r\n    data: null\r\n }}\r\n\r\n // if post does not exist then add to array\r\n blogPost.push(post);\r\n return{\r\n    status:'success' ,  // in handling errors\r\n    code: 200,\r\n    message: 'Post added successfully',\r\n    data: post\r\n }\r\n}\r\nconst getPost= async () =>{;\r\n return{\r\n    status:'success' ,  // in handling errors\r\n    code: 200,\r\n    message: 'Post fetched successfully',\r\n    data: blogPost\r\n }\r\n}\r\nconst updatePost = async(postId) => {\r\n   //loop into the data to see if data exists\r\nconst postExist = blogPost.find((element) => element.postId === postId); // helps you find the post if it exists.\r\n//if it does I want to receive this data\r\nif(postExist){\r\n   return{\r\n   status:'error' ,  // in handling errors\r\n   code: 409,\r\n   message: 'Post already exist',\r\n   data: null\r\n}}\r\n\r\n// if post does not exist then add to array\r\nblogPost[postId] = {...blogPost[postId],...updatePost};\r\nreturn{\r\n   status:'success' ,  // in handling errors\r\n   code: 200,\r\n   message: 'Post added successfully',\r\n   data: blogPost[postId]\r\n}\r\n}\r\n\r\nmodule.exports = {createPost,\r\n getPost,updatePost\r\n}"]}