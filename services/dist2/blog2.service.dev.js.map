{"version":3,"sources":["blog2.service.js"],"names":["blogPost","createPost","post","postIndex","findIndex","element","status","code","message","data","push","getPost","updatePost","postId","Id","deletePost","filter","module","exports"],"mappings":"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","sourcesContent":["// Services contain the logic for interaction with our database\r\n// Creating blog post\r\n\r\nlet blogPost = []; // empty array to fetch all the logic data to our server\r\n\r\nconst createPost = async (post) => {\r\n  // Find the index of the post with the same content, if it exists\r\n  const postIndex = blogPost.findIndex((element) => element.post === post);\r\n\r\n  // If the post exists, return an error\r\n  if (postIndex !== -1) { // the -1 indicates it not being able to find a matching element or item in the array.\r\n    return {\r\n      status: 'error', // in handling errors\r\n      code: 409,\r\n      message: 'Post already exists',\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  // If the post does not exist, add it to the array\r\n  blogPost.push(post);\r\n  return {\r\n    status: 'success', // in handling errors\r\n    code: 200,\r\n    message: 'Post added successfully',\r\n    data: post,\r\n  };\r\n};\r\n\r\nconst getPost = async () => {\r\n  return {\r\n    status: 'success', // in handling errors\r\n    code: 200,\r\n    message: 'Post fetched successfully',\r\n    data: blogPost,\r\n  };\r\n};\r\n\r\n//updating(PUT-Method) a blog \r\nconst updatePost = async (postId,updatePost) => {\r\n    // Find the index of the post with the same content, if it exists\r\n    const postIndex = blogPost.findIndex((element) => element.Id === postId);\r\n  \r\n    // If the post exists, return an error\r\n    if (postIndex !== -1) { // the -1 indicates it not being able to find a matching element or item in the array.\r\n      return {\r\n        status: 'error', // in handling errors\r\n        code: 409,\r\n        message: 'Page not exists',\r\n        data: null,\r\n      };\r\n    }else{\r\n  \r\n    // If the post does not exist, add it to the array\r\n    blogPost[postIndex] = { ...updatePost};//location of the element inside this array\r\n    // ... means spreading in javascript which helps you to update your content\r\n    return {\r\n      status: 'success', // in handling errors\r\n      code: 200,\r\n      message: 'Page updated sucessfully',\r\n      data: blogPost[postIndex]\r\n    };\r\n}\r\n};\r\n//deleting(Delete-method) a blog \r\nconst deletePost = async (postId) => {\r\n  // Find the index of the post with the same content, if it exists\r\n  const postIndex = blogPost.findIndex((element) => element.Id === postId);\r\n\r\n  // If the post exists, return an error\r\n  if (postIndex !== -1) { // the -1 indicates it not being able to find a matching element or item in the array.\r\n    return {\r\n      status: 'error', // in handling errors\r\n      code: 409,\r\n      message: 'Page  does not exists',\r\n      data: null,\r\n    };\r\n  }else{\r\n\r\n  // If the post does not exist, add it to the array\r\n  blogPost = [...blogPost.filter((element) => element.Id !== postId)];//location of the element inside this array\r\n  // \r\n  return {\r\n    status: 'success', // in handling errors\r\n    code: 200,\r\n    message: 'Page deleted sucessfully',\r\n    data: null\r\n  };\r\n};\r\n\r\n}\r\nmodule.exports = {\r\n  createPost,\r\n  getPost,updatePost,deletePost}\r\n"],"file":"blog2.service.dev.js"}