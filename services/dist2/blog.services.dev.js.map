{"version":3,"sources":["blog.services.js"],"names":["blogPost","createPost","post","postExist","find","element","status","code","message","data","push","getPost","updatePost","postId","module","exports"],"mappings":";;;;;;;;AAAA;AACA;AAEA,IAAOA,QAAQ,GAAG,EAAlB,C,CAAqB;;AAErB,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AACGC,UAAAA,SAFY,GAEAH,QAAQ,CAACI,IAAT,CAAc,UAACC,OAAD;AAAA,mBAAaA,OAAO,CAACH,IAAR,KAAiBA,IAA9B;AAAA,WAAd,CAFA,EAEmD;AACrE;;AAHkB,eAIfC,SAJe;AAAA;AAAA;AAAA;;AAAA,2CAKT;AACNG,YAAAA,MAAM,EAAC,OADD;AACY;AAClBC,YAAAA,IAAI,EAAE,GAFA;AAGNC,YAAAA,OAAO,EAAE,oBAHH;AAINC,YAAAA,IAAI,EAAE;AAJA,WALS;;AAAA;AAYlB;AACAT,UAAAA,QAAQ,CAACU,IAAT,CAAcR,IAAd;AAbkB,2CAcZ;AACHI,YAAAA,MAAM,EAAC,SADJ;AACiB;AACpBC,YAAAA,IAAI,EAAE,GAFH;AAGHC,YAAAA,OAAO,EAAE,yBAHN;AAIHC,YAAAA,IAAI,EAAEP;AAJH,WAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAqBA,IAAMS,OAAO,GAAE,SAATA,OAAS;AAAA;AAAA;AAAA;AAAA;AAAY;AAAZ,4CACR;AACHL,YAAAA,MAAM,EAAC,SADJ;AACiB;AACpBC,YAAAA,IAAI,EAAE,GAFH;AAGHC,YAAAA,OAAO,EAAE,2BAHN;AAIHC,YAAAA,IAAI,EAAET;AAJH,WADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;;AAQA,IAAMY,UAAU,GAAG,SAAbA,UAAa,CAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACGV,UAAAA,SAFa,GAEDH,QAAQ,CAACI,IAAT,CAAc,UAACC,OAAD;AAAA,mBAAaA,OAAO,CAACQ,MAAR,KAAmBA,MAAhC;AAAA,WAAd,CAFC,EAEsD;AACzE;;AAHmB,eAIhBV,SAJgB;AAAA;AAAA;AAAA;;AAAA,4CAKV;AACNG,YAAAA,MAAM,EAAC,OADD;AACY;AAClBC,YAAAA,IAAI,EAAE,GAFA;AAGNC,YAAAA,OAAO,EAAE,oBAHH;AAINC,YAAAA,IAAI,EAAE;AAJA,WALU;;AAAA;AAYnB;AACAT,UAAAA,QAAQ,CAACa,MAAD,CAAR,qBAAuBb,QAAQ,CAACa,MAAD,CAA/B,MAA2CD,UAA3C;AAbmB,4CAcb;AACHN,YAAAA,MAAM,EAAC,SADJ;AACiB;AACpBC,YAAAA,IAAI,EAAE,GAFH;AAGHC,YAAAA,OAAO,EAAE,yBAHN;AAIHC,YAAAA,IAAI,EAAET,QAAQ,CAACa,MAAD;AAJX,WAda;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAsBAC,MAAM,CAACC,OAAP,GAAiB;AAACd,EAAAA,UAAU,EAAVA,UAAD;AAChBU,EAAAA,OAAO,EAAPA,OADgB;AACRC,EAAAA,UAAU,EAAVA;AADQ,CAAjB","sourcesContent":["// Services contain the logic for interaction with our database\r\n// Creating blog post \r\n\r\nconst  blogPost = [] // empty array to fetch all the logic data to our server\r\n\r\nconst createPost = async(post) => {\r\n    //loop into the data to see if data exists\r\n const postExist = blogPost.find((element) => element.post === post); // helps you find the post if it exists.\r\n //if it does I want to receive this data\r\n if(postExist){\r\n    return{\r\n    status:'error' ,  // in handling errors\r\n    code: 409,\r\n    message: 'Post already exist',\r\n    data: null\r\n }}\r\n\r\n // if post does not exist then add to array\r\n blogPost.push(post);\r\n return{\r\n    status:'success' ,  // in handling errors\r\n    code: 200,\r\n    message: 'Post added successfully',\r\n    data: post\r\n }\r\n}\r\nconst getPost= async () =>{;\r\n return{\r\n    status:'success' ,  // in handling errors\r\n    code: 200,\r\n    message: 'Post fetched successfully',\r\n    data: blogPost\r\n }\r\n}\r\nconst updatePost = async(postId) => {\r\n   //loop into the data to see if data exists\r\nconst postExist = blogPost.find((element) => element.postId === postId); // helps you find the post if it exists.\r\n//if it does I want to receive this data\r\nif(postExist){\r\n   return{\r\n   status:'error' ,  // in handling errors\r\n   code: 409,\r\n   message: 'Post already exist',\r\n   data: null\r\n}}\r\n\r\n// if post does not exist then add to array\r\nblogPost[postId] = {...blogPost[postId],...updatePost};\r\nreturn{\r\n   status:'success' ,  // in handling errors\r\n   code: 200,\r\n   message: 'Post added successfully',\r\n   data: blogPost[postId]\r\n}\r\n}\r\n\r\nmodule.exports = {createPost,\r\n getPost,updatePost\r\n}"],"file":"blog.services.dev.js"}