{"version":3,"sources":["blog2.service.js"],"names":["blogPost","createPost","post","regeneratorRuntime","async","_context","prev","next","findIndex","element","abrupt","status","code","message","data","stop","getPost","_context2","postId","updatePost","postIndex","_context3","Id","_objectSpread","deletePost","_context4","_toConsumableArray","filter","module","exports"],"mappings":"yrCAGA,IAAIA,SAAW,GAETC,WAAa,SAAOC,GAAP,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,IAKE,IAHDP,SAASQ,UAAU,SAACC,GAAD,OAAaA,EAAQP,OAASA,IAFlD,OAAAG,EAAAK,OAAA,SAMR,CACLC,OAAQ,QACRC,KAAM,IACNC,QAAS,sBACTC,KAAM,OAVOT,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAnBP,SAAMC,KAAUC,GAAGG,EAAAK,OAAA,SAAA,CAAAC,OAAA,UAAAC,KAAA,IAAAC,QAAA,0BAAAC,KAAAZ,IAAA,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAU,WAEoBC,QAErC,WAAA,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OAAAU,EAAAP,OAAA,SAqBO,CAzBUC,OAAA,UAAAC,KAAA,IAAAC,QAAA,4BAAAC,KAAAd,WAIjB,KAAA,EAAA,IAAA,MAAA,OAAAiB,EAAAF,WAIIH,WAAM,SAFDM,EAAAC,GAEC,IAAAC,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,IARO,KAUbO,EAAMd,SAAAQ,UAAA,SAAAC,GAAA,OAAAA,EAAAa,KAAAJ,KAFA,OAAAG,EAAAX,OAAA,SAMV,CACAV,OAAAA,QAfiBY,KAAA,IAiBfD,QAAAA,kBAAmBG,KAAA,OATXO,EAAAd,KAAA,EAAA,MAAA,KAAA,EAAA,OAyCRP,SAASoB,GAATG,cAAA,GAA2BJ,GAzCnBE,EAAAX,OAAA,SARO,CAAAC,OAAA,UAAAC,KAAA,IAAAC,QAAA,2BAAAC,KAAAd,SAAAoB,KAQP,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAN,WAgBIS,WAAA,SAAAN,GAAA,OAAAf,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,IAEO,IAFPP,SAAAQ,UAAA,SAAAC,GAAA,OAAAA,EAAAa,KAAAJ,IAAA,OAAAO,EAAAf,OAAA,SAGZE,CACAC,OAAAA,QACAC,KAAAA,IAJKD,QADO,wBA8CVC,KAAM,OA9CIW,EAAAlB,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAP,SAAA0B,mBAAA1B,SAAA2B,OAAA,SAAAlB,GAAA,OAAAA,EAAAa,KAAAJ,KAAAO,EAAAf,OAAA,SAShB,CA6CIC,OAAQ,UACRC,KAAM,IA7CJO,QAAAA,2BAAaL,KAAA,OAVH,KAAA,EAAA,KAAA,EAAA,IAAA,MAAA,OAAAW,EAAAV,WAWZa,OAAAC,QAAA,CACMT,WAAAA,WAA+BJ,QAAAA,QAAAG,WAAAA,WAAaV,WAAAA","file":"blog2.service.min.js","sourcesContent":["// Services contain the logic for interaction with our database\r\n// Creating blog post\r\n\r\nlet blogPost = []; // empty array to fetch all the logic data to our server\r\n\r\nconst createPost = async (post) => {\r\n  // Find the index of the post with the same content, if it exists\r\n  const postIndex = blogPost.findIndex((element) => element.post === post);\r\n\r\n  // If the post exists, return an error\r\n  if (postIndex !== -1) { // the -1 indicates it not being able to find a matching element or item in the array.\r\n    return {\r\n      status: 'error', // in handling errors\r\n      code: 409,\r\n      message: 'Post already exists',\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  // If the post does not exist, add it to the array\r\n  blogPost.push(post);\r\n  return {\r\n    status: 'success', // in handling errors\r\n    code: 200,\r\n    message: 'Post added successfully',\r\n    data: post,\r\n  };\r\n};\r\n\r\nconst getPost = async () => {\r\n  return {\r\n    status: 'success', // in handling errors\r\n    code: 200,\r\n    message: 'Post fetched successfully',\r\n    data: blogPost,\r\n  };\r\n};\r\n\r\n//updating(PUT-Method) a blog \r\nconst updatePost = async (postId,updatePost) => {\r\n    // Find the index of the post with the same content, if it exists\r\n    const postIndex = blogPost.findIndex((element) => element.Id === postId);\r\n  \r\n    // If the post exists, return an error\r\n    if (postIndex !== -1) { // the -1 indicates it not being able to find a matching element or item in the array.\r\n      return {\r\n        status: 'error', // in handling errors\r\n        code: 409,\r\n        message: 'Page not exists',\r\n        data: null,\r\n      };\r\n    }else{\r\n  \r\n    // If the post does not exist, add it to the array\r\n    blogPost[postIndex] = { ...updatePost};//location of the element inside this array\r\n    // ... means spreading in javascript which helps you to update your content\r\n    return {\r\n      status: 'success', // in handling errors\r\n      code: 200,\r\n      message: 'Page updated sucessfully',\r\n      data: blogPost[postIndex]\r\n    };\r\n}\r\n};\r\n//deleting(Delete-method) a blog \r\nconst deletePost = async (postId) => {\r\n  // Find the index of the post with the same content, if it exists\r\n  const postIndex = blogPost.findIndex((element) => element.Id === postId);\r\n\r\n  // If the post exists, return an error\r\n  if (postIndex !== -1) { // the -1 indicates it not being able to find a matching element or item in the array.\r\n    return {\r\n      status: 'error', // in handling errors\r\n      code: 409,\r\n      message: 'Page  does not exists',\r\n      data: null,\r\n    };\r\n  }else{\r\n\r\n  // If the post does not exist, add it to the array\r\n  blogPost = [...blogPost.filter((element) => element.Id !== postId)];//location of the element inside this array\r\n  // \r\n  return {\r\n    status: 'success', // in handling errors\r\n    code: 200,\r\n    message: 'Page deleted sucessfully',\r\n    data: null\r\n  };\r\n};\r\n\r\n}\r\nmodule.exports = {\r\n  createPost,\r\n  getPost,updatePost,deletePost}\r\n"]}